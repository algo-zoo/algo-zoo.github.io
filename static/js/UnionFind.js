// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_array from "../rescript-lib/caml_array.js";

function create(n) {
  return {
          n: n,
          parents: Caml_array.make(n, undefined),
          groupSizes: Caml_array.make(n, 1)
        };
}

function root(uf, i) {
  var p = Caml_array.get(uf.parents, i);
  if (p === undefined) {
    return i;
  }
  var r = root(uf, p);
  Caml_array.set(uf.parents, i, r);
  return r;
}

function isSame(uf, i, j) {
  return root(uf, i) === root(uf, j);
}

function unite(uf, _i, _j) {
  while(true) {
    var j = _j;
    var i = _i;
    var u = root(uf, i);
    var v = root(uf, j);
    if (u === v) {
      return ;
    }
    if (Caml_array.get(uf.groupSizes, u) < Caml_array.get(uf.groupSizes, v)) {
      _j = u;
      _i = v;
      continue ;
    }
    Caml_array.set(uf.parents, v, u);
    Caml_array.set(uf.groupSizes, u, Caml_array.get(uf.groupSizes, u) + Caml_array.get(uf.groupSizes, v) | 0);
    return Caml_array.set(uf.groupSizes, v, 0);
  };
}

function size(uf, i) {
  return Caml_array.get(uf.groupSizes, root(uf, i));
}

var UnionFind = {
  create: create,
  root: root,
  isSame: isSame,
  unite: unite,
  size: size
};

export {
  UnionFind ,
}
/* No side effect */
