<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sort on Algo Zoo</title>
    <link>https://algo-zoo.com/ja/tags/sort/</link>
    <description>Recent content in Sort on Algo Zoo</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <atom:link href="https://algo-zoo.com/ja/tags/sort/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>マージソート</title>
      <link>https://algo-zoo.com/ja/merge-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://algo-zoo.com/ja/merge-sort/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;マージソートは整列アルゴリズムの一種で，以下の特徴を持つ:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配列を半分に分割し，左右それぞれを再帰的にソートして，その両者の結果を併合することを繰り返すことで配列を整列させる．分割統治法に基づくアルゴリズムの一例．&lt;/li&gt;&#xA;&lt;li&gt;配列の長さを $N$ としたとき，平均計算量も最悪計算量も $O(N \log{N})$ となることが知られている．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;p&gt;長さが $N$ の配列 $a$ を昇順にソートするには，以下の &lt;code&gt;MergeSort&lt;/code&gt; 関数を &lt;code&gt;MergeSort(a, 0, N)&lt;/code&gt; で呼び出すことで実現される．&lt;/p&gt;&#xA;&lt;h3 id=&#34;用語の定義&#34;&gt;用語の定義&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\arr{\mathrm{arr}}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自然数 $a, b$ について，集合 $\lbrace x \mid a \leq x &amp;lt; b \rbrace$ を $[a, b)$ で表す．いわゆる，左閉右開であるような半開区間．&lt;/li&gt;&#xA;&lt;li&gt;配列 $\arr$ と自然数 $a, b$ について，その部分配列 $\arr[a], \arr[a+1], \arr[a+2], \ldots, \arr[b-1]$ を $\arr[a, b)$ という記法で表す（ 注: $\arr[b]$は含まない ）．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;擬似コード&#34;&gt;擬似コード&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 配列 a の 区間 [left, right) 部分，すなわち a[left, right) をソートする関数&#xA;MergeSort(a, left, right) {&#xA;  if 区間 [left, right) のサイズが1 {&#xA;    return;&#xA;  } else {&#xA;    mid = (left + right) / 2;   // 区間の中間値を算出（注: 小数点以下がある場合は切り捨てて自然数にする）&#xA;    MergeSort(a, left, mid);    // 左区間 a[left, mid) を再帰的にソート&#xA;    MergeSort(a, mid, right);   // 右区間 a[mid, right) を再帰的にソート&#xA;    Merge(a, left, mid, right); // ２つのソート済み配列をマージ&#xA;  }&#xA;}&#xA;&#xA;// ソート済みな a[left, mid) と a[mid, right) をマージすることでソート済みの a[left, right) を作る関数&#xA;Merge(a, left, mid, right) {&#xA;  buf = 空配列; // データ退避用に空配列 buf を用意&#xA;  左区間 a[left, mid) と右区間 a[mid, right) の両方が空になるまで次の①, ②を繰り返し {&#xA;    ① 場合分けにより以下の３つのうちの当てはまる１つを実行:&#xA;      ①-(a) 左区間も右区間も要素が空でないとき: 「左区間の最小値」と「右区間の最小値」を比較し，小さい方を該当区間から抜き出して変数 v に格納;&#xA;      ①-(b) 左区間の要素が空のとき: 「右区間の最小値」を当該区間から抜き出して変数 v に格納;&#xA;      ①-(c) 右区間の要素が空のとき: 「左区間の最小値」を当該区間から抜き出して変数 v に格納;&#xA;    ②  配列 buf に変数 v の値を追加;&#xA;  }&#xA;  buf の中身を a[left, right) にコピーする;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;size&#34;&gt;配列要素数&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;number&#34; id=&#34;size&#34; value=&#34;8&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;generate&#34;&gt;入力の生成&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;array&#34;&gt;入力: 数値配列&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;text&#34; id=&#34;array&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;set&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;マージソートの処理&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
