<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algo Zoo</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Algo Zoo</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algo Zoo</title>
      <link>http://localhost:1313/ja/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/</guid>
      <description>&lt;h2 id=&#34;アルゴリズムビジュアライザー-ウェブページ&#34;&gt;アルゴリズム・ビジュアライザー ウェブページ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二分探索&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;number-guess&#34;&gt;二分探索法（数当て）&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;binary-search&#34;&gt;二分探索法（配列の値探索）&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;整列（ソート）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;merge-sort&#34;&gt;マージソート&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;クイックソート（作成予定）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;グラフ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;directed-graph&#34;&gt;隣接行列による有向グラフ表示&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;undirected-graph&#34;&gt;隣接行列による無向グラフ表示&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;キュー / スタック&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;queue&#34;&gt;キュー&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;stack&#34;&gt;スタック&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;幅優先探索 (BFS) / 深さ優先探索 (DFS)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;maze&#34;&gt;迷路の幅優先探索による最短経路探索&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;bfs&#34;&gt;グラフに対する幅優先探索&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dfs&#34;&gt;グラフに対する深さ優先探索&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最短経路探索&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dijkstra&#34;&gt;ダイクストラ法&lt;/a&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;応用例: &lt;a href=&#34;nagitsuji&#34;&gt;&lt;ruby&gt;椥辻&lt;rt&gt;なぎつじ&lt;/rt&gt;&lt;/ruby&gt;駅・京都橘大学間の最短経路探索&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;応用例: 乗換案内（作成予定）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;  &lt;!-- * ベルマン・フォード法（気が向いたら作成） --&gt;&#xA;  &lt;!-- * ワーシャル・フロイド法（気が向いたら作成） --&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最小全域木&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;kruskal&#34;&gt;クラスカル法&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;prim&#34;&gt;プリム法&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ヒープ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;max-heap&#34;&gt;Maxヒープ&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;min-heap&#34;&gt;Minヒープ&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;動的計画法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;部分和問題（作成予定）&lt;/li&gt;&#xA;&lt;li&gt;ナップサック問題（作成予定）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;極限&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;order&#34;&gt;オーダー評価&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;幾何&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;convex-hull-vis&#34;&gt;凸包（気が向いたら説明を追加する）&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;concave-hull-vis&#34;&gt;凹包（気が向いたら説明を追加する）&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;  &lt;!-- * ボロノイ図（気が向いたら作成） --&gt;&#xA;  &lt;!-- * 射影変換・透視投影（気が向いたら作成） --&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;その他&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;tidy&#34;&gt;画像の台形補正ツール&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UnionFind（作成予定）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--&#xA;* （ アプリ開発用 ）&#xA;    * [group vis](group-vis)&#xA;--&gt;</description>
    </item>
    <item>
      <title>Algo Zoo</title>
      <link>http://localhost:1313/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/</guid>
      <description>&lt;h2 id=&#34;a-webpage-for-algorithm-visualizers&#34;&gt;A webpage for algorithm visualizers&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Notice: Most of the contents are currently being translated. Please refer to &lt;a href=&#34;http://localhost:1313/ja&#34;&gt;the Japanese version&lt;/a&gt;&#xA; for the latest contents.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Binary Search&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Binary Search (Number Guessing)&lt;/li&gt;&#xA;&lt;li&gt;Binary Search (Search for Numeric Arrays)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Sorting&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Merge Sort&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Graph visualization&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Adjacency Matrix Representation of Directed Graphs&lt;/li&gt;&#xA;&lt;li&gt;Adjacency Matrix Representation of Undirected Graphs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Queue / Stack&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Queue&lt;/li&gt;&#xA;&lt;li&gt;Stack&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bredth-First Search (BFS) / Depth-First Search (DFS)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BFS for Mazes&lt;/li&gt;&#xA;&lt;li&gt;BFS for Graphs&lt;/li&gt;&#xA;&lt;li&gt;DFS for Graphs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Shortest Path&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dijkstra Algorithm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Minimum Spanning Tree&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kruskal Algorithm&lt;/li&gt;&#xA;&lt;li&gt;Prim Algorithm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Heap&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Max Heap&lt;/li&gt;&#xA;&lt;li&gt;Min Heap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Limit (Calculus)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Order Evaluation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Geometry&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Convex Hull&lt;/li&gt;&#xA;&lt;li&gt;Concave Hull&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Misc.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Perspective Correction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Maxヒープ</title>
      <link>http://localhost:1313/ja/max-heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/max-heap/</guid>
      <description>&lt;h2 id=&#34;データ構造&#34;&gt;データ構造&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;概要:&lt;/strong&gt; 値を管理するための木構造で，データの挿入操作と最大値削除操作が共に高速に（＝ 木の高さを $h$ としたとき，$O(\log{h})$で）行えるデータ構造．&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ヒープ条件:&lt;/strong&gt; Maxヒープ $T$ は，以下の条件を満たす:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$T$ は &lt;strong&gt;ほとんど完全な二分木(almost complete binary tree)&lt;/strong&gt; である．すなわち，$T$ の高さを $h$ としたとき，$T$の葉は左詰めで木を構築しており，$T$ の任意の葉は深さが $h$ か $h-1$ である．&lt;/li&gt;&#xA;&lt;li&gt;$T$の任意の頂点 $u$ について，もしその子頂点 $v$ が存在するならば，$u$ の値はかならず $v$ の値以上である．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;挿入処理-insertv&#34;&gt;挿入処理: &lt;code&gt;insert(v)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;値 $v$ の挿入は以下の通り実行:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ヒープの最後尾に $v$ を値として持つ頂点を追加．&lt;/li&gt;&#xA;&lt;li&gt;追加した頂点と，その親の頂点との間でヒープ条件が満たされない場合……&#xA;&lt;ul&gt;&#xA;&lt;li&gt;追加した頂点と，その親頂点とを交換．&lt;/li&gt;&#xA;&lt;li&gt;ヒープ条件が満たされるまで同様の処理を根の方に向かって行う．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;最大値削除処理-delete&#34;&gt;最大値削除処理: &lt;code&gt;delete()&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最大値を持つ頂点（＝根の頂点）の削除は以下の通り実行:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;根の頂点を削除し，最後尾の頂点を根に一時的に移す．&lt;/li&gt;&#xA;&lt;li&gt;移された頂点と，その子の頂点との間でヒープ条件が満たされない場合……&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移された頂点と子の頂点を交換する（注: このとき，子頂点が２つあるならば値が大きい方と交換する）．&lt;/li&gt;&#xA;&lt;li&gt;ヒープ条件が満たされるまで同様の処理を葉の方に向かって行う．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;program&#34;&gt;コマンド列&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; id=&#34;program&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;run&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;Maxヒープの処理（上部の配列は，二分ヒープの配列表現による配列）&lt;/label&gt;&#xA;    &lt;div class=&#34;mb-1&#34; id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;text-center&#34;&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Minヒープ</title>
      <link>http://localhost:1313/ja/min-heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/min-heap/</guid>
      <description>&lt;h2 id=&#34;データ構造&#34;&gt;データ構造&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;概要:&lt;/strong&gt; 値を管理するための木構造で，データの挿入操作と最小値削除操作が共に高速に（＝ 木の高さを $h$ としたとき，$O(\log{h})$で）行えるデータ構造．&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ヒープ条件:&lt;/strong&gt; Minヒープ $T$ は，以下の条件を満たす:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$T$ は &lt;strong&gt;ほとんど完全な二分木(almost complete binary tree)&lt;/strong&gt; である．すなわち，$T$ の高さを $h$ としたとき，$T$の葉は左詰めで木を構築しており，$T$ の任意の葉は深さが $h$ か $h-1$ である．&lt;/li&gt;&#xA;&lt;li&gt;$T$の任意の頂点 $u$ について，もしその子頂点 $v$ が存在するならば，$u$ の値はかならず $v$ の値以下である．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;挿入処理-insertv&#34;&gt;挿入処理: &lt;code&gt;insert(v)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/ja/max-heap&#34;&gt;Maxヒープ&lt;/a&gt;&#xA;の場合とほぼ同様に定める．値の順序判定のみが異なる．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;最小値削除処理-delete&#34;&gt;最小値削除処理: &lt;code&gt;delete()&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/ja/max-heap&#34;&gt;Maxヒープ&lt;/a&gt;&#xA;の場合とほぼ同様に定める．値の順序判定のみが異なる．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;program&#34;&gt;コマンド列&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; id=&#34;program&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;run&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;Minヒープの処理（上部の配列は，二分ヒープの配列表現による配列）&lt;/label&gt;&#xA;    &lt;div class=&#34;mb-1&#34; id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;text-center&#34;&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>オーダー評価</title>
      <link>http://localhost:1313/ja/order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/order/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;h3 id=&#34;オーダー記法の定義&#34;&gt;オーダー記法の定義&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;時間計算量を表す関数 $T(x)$ のオーダーが関数 $f(x)$ を用いて $T(x) = O(f(x))$ で表せるとは，ある自然数 $N_0$ と正の実数 $c$ があって，$N_0$ 以上の任意の自然数 $N$ について，次が成り立つとき言う: $\displaystyle |T(N)| \leq c \cdot |f(N)|$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;label&gt;各種定義&lt;/label&gt;&#xA;  &lt;div class=&#34;alg-box light-red&#34;&gt;&#xA;    &lt;label for=&#34;function&#34;&gt;時間計算量関数: $T(x)$&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; id=&#34;function&#34; type=&#34;text&#34; value=&#34;3*x + 123&#34; onchange=&#34;reload();&#34;&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;function_viz&#34; value=&#34;1&#34; checked&gt;グラフ表示&lt;/input&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;function_viz&#34; value=&#34;0&#34;&gt;グラフ非表示&lt;/input&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;alg-box light-gray&#34;&gt;&#xA;    &lt;label for=&#34;order&#34;&gt;オーダー表現用の関数: $f(x)$&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; id=&#34;order&#34; type=&#34;text&#34; value=&#34;x&#34; onchange=&#34;reload();&#34;&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;order_viz&#34; value=&#34;1&#34;&gt;グラフ表示&lt;/input&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;order_viz&#34; value=&#34;0&#34; checked&gt;グラフ非表示&lt;/input&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;alg-box light-blue&#34;&gt;&#xA;    &lt;label for=&#34;const_c&#34;&gt;関数 $c \cdot f(x)$ の定数: $c$&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; id=&#34;const_c&#34; type=&#34;text&#34; value=&#34;2&#34; onchange=&#34;reload();&#34;&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;c_viz&#34; value=&#34;1&#34;&gt;グラフ表示&lt;/input&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;c_viz&#34; value=&#34;0&#34; checked&gt;グラフ非表示&lt;/input&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;alg-box zebra&#34;&gt;&#xA;    &lt;label for=&#34;const_n&#34;&gt;定数: $N_0$&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; id=&#34;const_n&#34; type=&#34;text&#34; value=&#34;0&#34; onchange=&#34;reload();&#34;&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;n_viz&#34; value=&#34;1&#34;&gt;グラフ表示&lt;/input&gt;&#xA;    &lt;input type=&#34;radio&#34; name=&#34;n_viz&#34; value=&#34;0&#34; checked&gt;グラフ非表示&lt;/input&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;&lt;label&gt;関数$f(x)$による関数$T(x)$のオーダー評価の成否の簡易チェック&lt;/label&gt;&lt;/p&gt;&#xA;  &lt;div class=&#34;alg-box&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&#xA;        定数$\,c\,$の値を &lt;span class=&#34;blue-text bold&#34; id=&#34;c_view&#34;&#34;&gt;????&lt;/span&gt; とし，&#xA;        定数$\,N_0\,$の値を &lt;span class=&#34;blue-text bold&#34; id=&#34;n0_view&#34;&gt;????&lt;/span&gt; とする．&#xA;      &lt;/li&gt;&#xA;      &lt;li&gt;&#xA;        このとき，$N_0\,$以上の任意の$\,N\,$について$\,|T(N)| \leq c \cdot |f(N)|\,$が……&#xA;        「&lt;span class=&#34;bold&#34; id=&#34;result1&#34;&gt;????&lt;/span&gt;」&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;（☝  本当はここの不等式が成り立つかをちゃんと証明しないとダメ）&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li&gt;&#xA;        よって，$T(N) = O(f(N))$が……&#xA;        「&lt;span class=&#34;bold&#34; id=&#34;result2&#34;&gt;????&lt;/span&gt;」&#xA;      &lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div id=&#34;plot&#34;&gt;&#xA;    &lt;label for=&#34;graph&#34;&gt;グラフ&lt;/label&gt;&#xA;    &lt;div id=&#34;graph&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>キュー</title>
      <link>http://localhost:1313/ja/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/queue/</guid>
      <description>&lt;h2 id=&#34;データ構造&#34;&gt;データ構造&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;概要:&lt;/strong&gt; 先入れ先出し（FIFO: First In First Out）、後入れ後出し（LILO: Last In Last Out）の出し入れ順序でデータを格納する構造。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作:&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;enqueue(data)&lt;/code&gt;: 要素 &lt;code&gt;data&lt;/code&gt; をキューに挿入する操作．&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dequeue()&lt;/code&gt;: キューから，キュー内にある要素の中で最初に挿入された要素を取り出す操作．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;program&#34;&gt;コマンド列&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; id=&#34;program&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;run&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;キューの処理&lt;/label&gt;&#xA;    &lt;div class=&#34;mb-1&#34; id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;text-center&#34;&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>クラスカル法</title>
      <link>http://localhost:1313/ja/kruskal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/kruskal/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 連結な重み付き無向グラフ $G = (V, E, w)$&lt;/li&gt;&#xA;&lt;li&gt;出力: $G$ の最小全域木&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\Vp{V^\prime}$&#xA;$\gdef\Ep{E^\prime}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\Vp$: 「（最小全域木を作る過程で）確定した頂点の集合」&lt;/li&gt;&#xA;&lt;li&gt;$\Ep$: 「（最小全域木を作る過程で）確定した辺の集合」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$\Vp, \Ep$の初期値はそれぞれ空集合とする．入力のグラフの辺集合 $E$ について，各辺を重みが小さい順にソートする．ソート結果の辺を順に $e_0, e_1, \ldots, e_{|E|-1}$とする．ただし，$|E|$は$E$の要素数を表す．&lt;/li&gt;&#xA;&lt;li&gt;各 $i = 0, 1, \ldots, (|E|-1)$に対して，以下を実行:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;辺 $e_i = (u_i, v_i)$ について，$\Ep$ に $e_i$ を追加することを考えたとき……&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サイクルが形成されるならば，辺 $e_i$ を $\Ep$ に追加せず破棄;&lt;/li&gt;&#xA;&lt;li&gt;サイクルが形成されないなら，$\Vp \gets \Vp \cup \lbrace u_i, v_i \rbrace$ と $\Ep \gets \Ep \cup \lbrace e_i \rbrace$により各集合を更新．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;この時点で $\Vp = V$ であり，$(V, \Ep)$ が最小全域木となるので終了．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;search&#34;&gt;ワンステップ探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;goal&#34;&gt;最終状態まで探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;table border=&#34;1&#34; id=&#34;data_tbl&#34;&gt;&#xA;    &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;        &lt;th&gt;辺&lt;/th&gt;&#xA;        &lt;th&gt;重み&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最小全域木の辺として採用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;    &lt;/thead&gt;&#xA;  &lt;/table&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>グラフに対する幅優先探索(BFS)</title>
      <link>http://localhost:1313/ja/bfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/bfs/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 有向グラフ $G = (V, E)$ と探索開始頂点 $s$&lt;/li&gt;&#xA;&lt;li&gt;出力: $G$ を $s$ から幅優先探索したときの訪問した頂点の列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;!--&#xA;### 使用するデータ構造&#xA;&#xA;$\gdef\svisited{\mathrm{visited}}$&#xA;$\gdef\visited#1{\svisited[{#1}]}$&#xA;&#xA;* $Q$: 「探索予定の頂点を格納するためのキュー」&#xA;* $\visited{u}$: 「頂点 $u$ が何番目に探索されたかを記録するための数値配列」&#xA;&#xA;### 手続き&#xA;&#xA;1. キュー $Q$ に対し，探索開始頂点 $s$ を enqueue する．また，$\visited{s} \leftarrow 0$ とし，開始頂点 $s$ 以外の各頂点 $v$ について $\visited{v} \leftarrow \infty$ とする．&#xA;2. キュー $Q$ が空になるまで，以下を繰り返し実行:&#xA;    - $Q$ を dequeue して得られる要素を $v$ とする．&#xA;    - $v$ に隣接する各頂点 $t$ について$^{\dagger}$，以下を実行:&#xA;        - $\visited{t} = \infty$ ならば，未訪問頂点なので，$t$ をキューに enqueue し，$\visited{t} \leftarrow \visited{v} + 1$ とする．&#xA;        - $\visited{t} \neq \infty$ ならば，訪問済みもしくは訪問予定の頂点であるから，何もしない．&#xA;3. この時点で幅優先探索が終了し，$\svisited$ に結果が格納されている．（注: $\visited{v} = \infty$ ならば開始頂点 $s$ から頂点 $v$ にはたどり着けない; $\visited{v} = j$ならば，頂点 $v$ は開始頂点から $j$ 番目に訪問される頂点）&#xA;--&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\svisited{\mathrm{visited}}$&#xA;$\gdef\visited#1{\svisited[{#1}]}$&#xA;$\gdef\null{\mathrm{null}}$&lt;/p&gt;</description>
    </item>
    <item>
      <title>グラフに対する深さ優先探索(DFS)</title>
      <link>http://localhost:1313/ja/dfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/dfs/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 有向グラフ $G = (V, E)$ と探索開始頂点 $s$&lt;/li&gt;&#xA;&lt;li&gt;出力: $G$ を $s$ から深さ優先探索したときの訪問した頂点の列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\svisited{\mathrm{visited}}$&#xA;$\gdef\visited#1{\svisited[{#1}]}$&#xA;$\gdef\null{\mathrm{null}}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$S$: 「探索予定の頂点を格納するためのスタック」&lt;/li&gt;&#xA;&lt;li&gt;$i$: 「現在の探索順番を記録するための数値変数」&lt;/li&gt;&#xA;&lt;li&gt;$\visited{u}$: 「頂点 $u$ が何番目に探索されたかを記録するための数値配列」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;スタック $S$ に対し，探索開始頂点 $s$ を push する．また，$i \leftarrow 0$ とし，各頂点 $u \in V$ について $\visited{u} \leftarrow \null$ とする．&lt;/li&gt;&#xA;&lt;li&gt;スタック $S$ が空になるまで，以下を繰り返し実行:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$S$ を pop して得られる要素を $u$ とする．以下を実行:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\visited{u} = \null$ ならば，$\visited{u} \leftarrow i$ を実行して次に進む．&lt;/li&gt;&#xA;&lt;li&gt;$\visited{u} \neq \null$ ならば，頂点 $u$ は探索済みだから，2.の処理を実行．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;$u$ に隣接する各頂点 $t$ について$^{\dagger}$，以下を実行:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\visited{t} = \null$ ならば，頂点 $t$ は未訪問であるから $t$ をスタックに push する．&lt;/li&gt;&#xA;&lt;li&gt;$\visited{t} \neq \null$ ならば，訪問済み頂点であるから何もしない．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;$i \leftarrow i + 1$ を実行．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;この時点で深さ優先探索が終了し，$\svisited$に結果が格納されている．&lt;br&gt;（注: $\visited{v} = \null$ ならば開始頂点 $s$ から頂点 $v$ にはたどり着けない; $\visited{v} = j$ならば，頂点 $v$ は開始頂点から $j$ 番目に訪問される頂点）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;手続きの補足&#34;&gt;手続きの補足&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;上記の手続きは一例であり，他の実装方法もある．特に，今回の実装では pop 時点で $\svisited$ を更新しているが，push 時点で更新する方が一般的．なお，今回の実装ではスタックに同一要素が push される場合がある．&lt;/li&gt;&#xA;&lt;li&gt;上記の $(\dagger)$ 部分の「$u$ に隣接する各頂点 $t$」について，どの隣接頂点を先に探索するかによって探索順に違いが現れる．そのため，何らかの規則によって探索順を規定することでアルゴリズムの出力を一意にできる．&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本ビジュアライザのサンプルでは，$(\dagger)$処理において，複数の頂点があり得る場合は，&lt;strong&gt;辞書順で後に来る&lt;/strong&gt;ラベルの頂点から処理している．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;label&gt;探索開始頂点&lt;/label&gt;&lt;select id=&#34;start&#34;&gt;&lt;/select&gt;&#xA;  &lt;button class=&#34;alg-btn&#34; id=&#34;search&#34;&gt;ワンステップ探索&lt;/button&gt;&#xA;  &lt;button class=&#34;alg-btn&#34; id=&#34;goal&#34;&gt;最終状態まで探索&lt;/button&gt;&#xA;  &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>グループビジュアライザ</title>
      <link>http://localhost:1313/ja/group-vis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/group-vis/</guid>
      <description>&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>スタック</title>
      <link>http://localhost:1313/ja/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/stack/</guid>
      <description>&lt;h2 id=&#34;データ構造&#34;&gt;データ構造&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;概要:&lt;/strong&gt; 後入れ先出し（LIFO: Last In First Out）、先入れ後出し（FILO: First In Last Out）の出し入れ順序でデータを格納する構造。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作:&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;push(data)&lt;/code&gt;: 要素 &lt;code&gt;data&lt;/code&gt; をスタックに挿入する操作．&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt;: スタックから，スタック内にある要素の中で最後に挿入された要素を取り出す操作．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;program&#34;&gt;コマンド列&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; id=&#34;program&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;run&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;スタックの処理&lt;/label&gt;&#xA;    &lt;div class=&#34;mb-1&#34; id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;text-center&#34;&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ダイクストラ法</title>
      <link>http://localhost:1313/ja/dijkstra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/dijkstra/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 辺の重みが非負である重み付きグラフ $G = (V, E, w)$ と探索開始頂点 $s$&lt;/li&gt;&#xA;&lt;li&gt;出力: 開始頂点 $s$ から辿れる各頂点 $v$ について，経路長が最短の $s$-$v$ ウォーク&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\dist#1{\mathrm{dist}[{#1}]}$&#xA;$\gdef\prev#1{\mathrm{prev}[{#1}]}$&#xA;$\gdef\null{\mathrm{null}}$&#xA;$\gdef\weight#1#2{w(#1, #2)}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$S$:「すでに最短経路が確定している頂点の集合」&lt;/li&gt;&#xA;&lt;li&gt;$\dist{v}$:「開始頂点 $s$ から頂点 $v$ までの（暫定）最短経路の長さ」&lt;/li&gt;&#xA;&lt;li&gt;$\prev{v}$:「開始頂点 $s$ から頂点 $v$ の（暫定）最短経路で，$v$ の前に位置する頂点」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$S$ の初期値は空集合とする．開始頂点 $s$ について $\dist{s} \gets 0$ で初期化し，$s$ 以外の各頂点 $v$ は $\dist{v} \gets \infty$ で初期化．また，（$s$ も含めた）各頂点 $v$ について $\prev{v} \gets \null$ とする．&lt;/li&gt;&#xA;&lt;li&gt;$v \not\in S$ である頂点の中で $\dist{v}$ の値が最小の頂点を求め，それを $u$ とする．&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$u$ に隣接する各頂点 $t$ について，次を実行: $\dist{t} &amp;gt; \dist{u} + \weight{u}{t}$ ならば，&#xA;$\dist{t} \gets \dist{u} + \weight{u}{t}$ と $\prev{t} \gets u$ の更新（注: $\weight{u}{t}$ は辺 $(u, t)$ に定義された重みの値）．&lt;/li&gt;&#xA;&lt;li&gt;$S \gets S \cup \lbrace u \rbrace$とする．$S = V$ ならば終了で，そうでないなら 2. の処理を繰り返す．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;label&gt;探索開始頂点&lt;/label&gt;&lt;select id=&#34;start&#34;&gt;&lt;/select&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;search&#34;&gt;ワンステップ探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;goal&#34;&gt;最終状態まで探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;table class=&#34;border&#34; id=&#34;data_tbl&#34;&gt;&#xA;    &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;        &lt;th&gt;ノードi&lt;/th&gt;&#xA;        &lt;th&gt;最短経路が確定&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最短経路の経路長 dist[i]&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最短経路における頂点iの一つ前の頂点 prev[i]&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;    &lt;/thead&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;注意: グラフ上の，経路が確定した頂点にマウスをかざすと具体的な最短経路を表示可能&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>プリム法</title>
      <link>http://localhost:1313/ja/prim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/prim/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 連結な重み付き無向グラフ $G = (V, E, w)$&lt;/li&gt;&#xA;&lt;li&gt;出力: $G$ の最小全域木&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\Vp{V^\prime}$&#xA;$\gdef\Ep{E^\prime}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\Vp$: 「（最小全域木を作る過程で）確定した頂点の集合」&lt;/li&gt;&#xA;&lt;li&gt;$\Ep$: 「（最小全域木を作る過程で）確定した辺の集合」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$\Ep$ の初期値は空集合とする．入力グラフの頂点集合 $V$ から，一つ要素を適当に決め $v_0$ とする．$\Vp \gets \lbrace v_0 \rbrace$で初期化．&lt;/li&gt;&#xA;&lt;li&gt;$\Vp$ に含まれる頂点 $u$ と，$\Vp$ に含まれない頂点 $v$ を結ぶ辺 $(u, v)$ の中で，重みが最小な辺を選び，それを $(s, t)$ とする．次を順に実行:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\Vp \gets \Vp \cup \lbrace s, t \rbrace$ とし，$\Ep \gets \Ep \cup \lbrace (s, t) \rbrace$ とする．&lt;/li&gt;&#xA;&lt;li&gt;$\Vp = V$ ならば $(V, \Ep)$が最小全域木となるので終了．$\Vp \neq V$ならば 2. を繰り返し実行．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;label&gt;探索開始頂点&lt;/label&gt;&lt;select id=&#34;start&#34;&gt;&lt;/select&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;search&#34;&gt;ワンステップ探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;goal&#34;&gt;最終状態まで探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;table border=&#34;1&#34; id=&#34;data_tbl&#34;&gt;&#xA;    &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;        &lt;th&gt;辺&lt;/th&gt;&#xA;        &lt;th&gt;重み&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最小全域木の辺として採用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;    &lt;/thead&gt;&#xA;  &lt;/table&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>マージソート</title>
      <link>http://localhost:1313/ja/merge-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/merge-sort/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;マージソートは整列アルゴリズムの一種で，以下の特徴を持つ:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配列を半分に分割し，左右それぞれを再帰的にソートして，その両者の結果を併合することを繰り返すことで配列を整列させる．分割統治法に基づくアルゴリズムの一例．&lt;/li&gt;&#xA;&lt;li&gt;配列の長さを $N$ としたとき，平均計算量も最悪計算量も $O(N \log{N})$ となることが知られている．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;p&gt;長さが $N$ の配列 $a$ を昇順にソートするには，以下の &lt;code&gt;MergeSort&lt;/code&gt; 関数を &lt;code&gt;MergeSort(a, 0, N)&lt;/code&gt; で呼び出すことで実現される．&lt;/p&gt;&#xA;&lt;h3 id=&#34;用語の定義&#34;&gt;用語の定義&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\arr{\mathrm{arr}}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自然数 $a, b$ について，集合 $\lbrace x \mid a \leq x &amp;lt; b \rbrace$ を $[a, b)$ で表す．いわゆる，左閉右開であるような半開区間．&lt;/li&gt;&#xA;&lt;li&gt;配列 $\arr$ と自然数 $a, b$ について，その部分配列 $\arr[a], \arr[a+1], \arr[a+2], \ldots, \arr[b-1]$ を $\arr[a, b)$ という記法で表す（ 注: $\arr[b]$は含まない ）．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;擬似コード&#34;&gt;擬似コード&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 配列 a の 区間 [left, right) 部分，すなわち a[left, right) をソートする関数&#xA;MergeSort(a, left, right) {&#xA;  if 区間 [left, right) のサイズが1 {&#xA;    return;&#xA;  } else {&#xA;    mid = (left + right) / 2;   // 区間の中間値を算出（注: 小数点以下がある場合は切り捨てて自然数にする）&#xA;    MergeSort(a, left, mid);    // 左区間 a[left, mid) を再帰的にソート&#xA;    MergeSort(a, mid, right);   // 右区間 a[mid, right) を再帰的にソート&#xA;    Merge(a, left, mid, right); // ２つのソート済み配列をマージ&#xA;  }&#xA;}&#xA;&#xA;// ソート済みな a[left, mid) と a[mid, right) をマージすることでソート済みの a[left, right) を作る関数&#xA;Merge(a, left, mid, right) {&#xA;  buf = 空配列; // データ退避用に空配列 buf を用意&#xA;  左区間 a[left, mid) と右区間 a[mid, right) の両方が空になるまで次の①, ②を繰り返し {&#xA;    ① 場合分けにより以下の３つのうちの当てはまる１つを実行:&#xA;      ①-(a) 左区間も右区間も要素が空でないとき: 「左区間の最小値」と「右区間の最小値」を比較し，小さい方を該当区間から抜き出して変数 v に格納;&#xA;      ①-(b) 左区間の要素が空のとき: 「右区間の最小値」を当該区間から抜き出して変数 v に格納;&#xA;      ①-(c) 右区間の要素が空のとき: 「左区間の最小値」を当該区間から抜き出して変数 v に格納;&#xA;    ②  配列 buf に変数 v の値を追加;&#xA;  }&#xA;  buf の中身を a[left, right) にコピーする;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;size&#34;&gt;配列要素数&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;number&#34; id=&#34;size&#34; value=&#34;8&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;generate&#34;&gt;入力の生成&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;array&#34;&gt;入力: 数値配列&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;text&#34; id=&#34;array&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;set&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;マージソートの処理&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>二分探索</title>
      <link>http://localhost:1313/ja/binary-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/binary-search/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 長さ $N$ の昇順ソート済みの配列 $a$ と探索したい値 $v$&lt;/li&gt;&#xA;&lt;li&gt;出力: $a[i] = v$ となる $v$ が存在するならば $i$ を，存在しないならばその旨を返す．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;p&gt;$\gdef\vleft{\mathrm{left}}$&#xA;$\gdef\vright{\mathrm{right}}$&#xA;$\gdef\vmid{\mathrm{mid}}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\vleft$:「探索範囲の左端の添字を格納するための変数」&lt;/li&gt;&#xA;&lt;li&gt;$\vright$:「探索範囲の右端の添字を格納するための変数」&lt;/li&gt;&#xA;&lt;li&gt;$\vmid$:「探索範囲の中間点の添字を格納するための変数」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$\vleft \gets 0$ と $\vright \gets (N-1)$ で各変数を初期化．&lt;/li&gt;&#xA;&lt;li&gt;$\vleft \leq \vright$が成立する間，以下を繰り返す:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\displaystyle\vmid \gets \left\lbrack \frac{\vleft + \vright}{2} \right\rbrack$ とする（注: $\lbrack x \rbrack$は$x$の小数点以下を切り捨てて整数にする関数）&lt;/li&gt;&#xA;&lt;li&gt;$a[\vmid]$ の値に応じて以下の通り場合分け:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$a[\vmid] = v$ ならば，値が存在したことになるので添字 $\vmid$ を返して終了;&lt;/li&gt;&#xA;&lt;li&gt;$a[\vmid] &amp;lt; v$ ならば，$\vleft \gets (\vmid + 1)$ として 2. を繰り返す;&lt;/li&gt;&#xA;&lt;li&gt;$a[\vmid] &amp;gt; v$ ならば，$\vright \gets (\vmid - 1)$ として 2. を繰り返す．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;この部分に達した場合，配列 $a$ 中に $v$ が存在しないので，その旨を返して終了．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;size&#34;&gt;配列要素数&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;number&#34; id=&#34;size&#34; value=&#34;16&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;generate&#34;&gt;入力の生成&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;array&#34;&gt;入力: 数値配列&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;text&#34; id=&#34;array&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;set&#34;&gt;設定&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label&gt;配列状態・探索状況&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;begin&#34;&gt;探索する値（＝配列に存在するか判定する値）&lt;/label&gt;&lt;br&gt;&#xA;    &lt;input class=&#34;alg-input&#34; type=&#34;number&#34; id=&#34;target&#34; value=&#34;0&#34;&gt;&lt;/input&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;run&#34;&gt;ワンステップ実行&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;実行記録&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; rows=&#34;12&#34; id=&#34;textbox&#34; disabled&gt;&lt;/textarea&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>二分探索による数当て</title>
      <link>http://localhost:1313/ja/number-guess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/number-guess/</guid>
      <description>&lt;h2 id=&#34;問題の状況設定&#34;&gt;問題の状況設定&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;あなたはピエロと数当てゲームをすることになった．&lt;/li&gt;&#xA;&lt;li&gt;ピエロは，ある整数$a, b$について$a$以上$b$以下の数値のうち，一つを選び，あなたには分からない形でその数値を記録する．&lt;/li&gt;&#xA;&lt;li&gt;あなたが，ピエロに対して何回か「YesかNoかで答えられる質問」をすることができたとする．&lt;/li&gt;&#xA;&lt;li&gt;このとき二分探索法に基づいた質問方法では何回の質問でその数値を与えることができるか？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;二分探索法による質問方法&#34;&gt;二分探索法による質問方法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;手続きのアイディア&#34;&gt;手続きのアイディア&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;候補となる探索範囲を毎回の質問で半分にする質問をする．例えば，探索する範囲のちょうど中間の整数 $m$ について「答えの数値は $m$ 以下ですか？」という質問をして範囲を半減させる．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続きの一例&#34;&gt;手続きの一例&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$b - a &amp;gt; 1$である間，すなわち，探索範囲の幅が1より大きい間は以下の処理を繰り返す:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\displaystyle m \gets \left\lbrack \frac{a+b}{2} \right\rbrack$ とする（注: $\lbrack x \rbrack$は$x$の小数点以下を切り捨てて整数にする関数）&lt;/li&gt;&#xA;&lt;li&gt;ピエロに対して「答えの数値は $m$ 以下ですか？」と質問し，回答に応じて場合分け:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yesの場合: このとき $a$ 〜 $m$ に答えがあることが分かるから，$b \gets m$ で$b$を更新する．&lt;/li&gt;&#xA;&lt;li&gt;Noの場合： このとき $(m+1)$ 〜 $b$ に答えがあることが分かるから，$a \gets m+1$ で$a$を更新する．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;この時点で$a + 1 = b$となり探索幅が$1$となって答えが$b$に確定する．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;begin&#34; class=&#34;block&#34;&gt;始点&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; type=&#34;number&#34; id=&#34;begin&#34; value=&#34;1&#34;&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;end&#34; class=&#34;block&#34;&gt;終点&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input&#34; type=&#34;number&#34; id=&#34;end&#34; value=&#34;100&#34;&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;mb-2&#34;&gt;&#xA;    &lt;label for=&#34;target&#34; class=&#34;block&#34;&gt;答えの数値&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; type=&#34;number&#34; id=&#34;target&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; type=&#34;button&#34; id=&#34;random&#34;&gt;自動生成&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;binary&#34; class=&#34;block&#34;&gt;探索&lt;/label&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; type=&#34;button&#34; id=&#34;binary&#34;&gt;実行&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;table id=&#34;chat&#34;&gt;&#xA;  &lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;『&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873117850/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;アルゴリズム・クイックリファレンス 第2版&lt;/a&gt;&#xA;』（George T. Heineman, Gary Pollice, Stanley Selkow 著; 黒川 利明, 黒川 洋 訳; オライリー・ジャパン 発行）の第1章「アルゴリズムで考える」の2.4.2節「対数的な振る舞い」に現れる問題例を改変．&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>凸包ビジュアライザ</title>
      <link>http://localhost:1313/ja/convex-hull-vis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/convex-hull-vis/</guid>
      <description>&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;random&#34;&gt;ランダム生成&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>凹包ビジュアライザ</title>
      <link>http://localhost:1313/ja/concave-hull-vis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/concave-hull-vis/</guid>
      <description>&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;random&#34;&gt;ランダム生成&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>最短経路探索</title>
      <link>http://localhost:1313/ja/nagitsuji/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/nagitsuji/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;椥辻駅・京都橘大学間の最短経路を&lt;a href=&#34;../dijkstra&#34;&gt;ダイクストラ法&lt;/a&gt;&#xA;により求める例．&lt;/li&gt;&#xA;&lt;li&gt;地図のグラフによるモデル化は，交差点等に頂点を設置することで徒歩の道を実現．また，辺の重みは「画面上のピクセル数」を設定することで地図上の実際の距離を近似している．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;p&gt;地図の画像は &lt;a href=&#34;https://www.openstreetmap.org/copyright/ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenStreetMap&lt;/a&gt;&#xA; を使用．&lt;/p&gt;&#xA;&lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div class=&#34;mt-2&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;image_load&#34;&gt;画像ON/OFF&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;graph_draw&#34;&gt;グラフON/OFF&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;探索開始頂点&lt;/label&gt;&lt;select id=&#34;start&#34;&gt;&lt;/select&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;search&#34;&gt;ワンステップ探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;goal&#34;&gt;最終状態まで探索&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;reset&#34;&gt;リセット&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;table border=&#34;1&#34; id=&#34;tbl&#34;&gt;&#xA;    &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;        &lt;th&gt;ノードi&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最短経路の経路長さ d[i]&lt;/th&gt;&#xA;        &lt;th&gt;（暫定）最短経路の頂点iの一つ前の頂点 prev[i]&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;    &lt;/thead&gt;&#xA;  &lt;/table&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>画像の台形補正ツール</title>
      <link>http://localhost:1313/ja/tidy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/tidy/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本アプリはアップロードされた画像を台形補正するツールです。&lt;/li&gt;&#xA;&lt;li&gt;使用方法:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;アップロードボタンより、画像（JPG画像もしくはPNG画像）をアップロードする。&lt;/li&gt;&#xA;&lt;li&gt;アップロードされた画像と、台形補正用の４つのマーカーが表示されるので、４つのマーカーをマウスクリック・移動により適切な位置に移動させる。&lt;/li&gt;&#xA;&lt;li&gt;適切な変換後の出力が得られたら、必要に応じてファイル名を変更し、保存ボタンを画像を保存する。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;台形補正&#34;&gt;台形補正&lt;/h2&gt;&#xA;&lt;h3 id=&#34;元画像&#34;&gt;元画像&lt;/h3&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;input class=&#34;alg-upload-input&#34; aria-describedby=&#34;load_help&#34; id=&#34;load&#34; type=&#34;file&#34; accept=&#34;.jpg, .jpeg, .png&#34;&gt;&#xA;  &lt;p class=&#34;alg-help-text&#34; id=&#34;load_help&#34;&gt;JPG画像またはPNG画像をアップロード&lt;/p&gt;&#xA;&lt;p&gt;&lt;canvas id=&#34;inputCanvas&#34;&gt;&lt;/canvas&gt;&lt;/p&gt;&#xA;  &lt;div id=&#34;rotate-button-container&#34;&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;ccw&#34;&gt;↶ 左回転&lt;/button&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;cw&#34;&gt;右回転 ↷&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 id=&#34;変換後の画像&#34;&gt;変換後の画像&lt;/h3&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;canvas id=&#34;outputCanvas&#34;&gt;&lt;/canvas&gt;&#xA;  &lt;label for=&#34;file_name&#34;&gt;保存時のファイル名&lt;/label&gt;&#xA;  &lt;div class=&#34;display: flex&#34;&gt;&#xA;    &lt;input class=&#34;alg-input&#34; id=&#34;file_name&#34; type=&#34;text&#34; placeholder=&#34;保存時のファイル名&#34;&gt;&lt;/input&gt;&#xA;    &lt;label class=&#34;ml-2 mt-1&#34;&gt;.jpg&lt;/label&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;button class=&#34;alg-btn mt-2&#34; id=&#34;save&#34;&gt;保存&lt;/button&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>迷路の最短経路探索</title>
      <link>http://localhost:1313/ja/maze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/maze/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;&#xA;&lt;p&gt;$\gdef\map{\mathrm{map}}$&#xA;$\gdef\sdist{\mathrm{dist}}$&#xA;$\gdef\dist#1#2{\sdist[#1][#2]}$&#xA;$\gdef\xp{x^\prime}$&#xA;$\gdef\yp{y^\prime}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力: 障害物のマスを記録した二次元配列 $\map$，スタート座標 $(sx, sy)$，ゴール座標 $(gx, gy)$．&#xA;&lt;ul&gt;&#xA;&lt;li&gt;備考: スタートからゴールまでの経路が一つは存在することを仮定する．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;出力: スタート座標からゴール座標まで，四方向移動で移動したときの最短経路長．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用するデータ構造&#34;&gt;使用するデータ構造&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\sdist$:「各マスの（暫定）最短経路長を記録するための二次元配列」&lt;/li&gt;&#xA;&lt;li&gt;$d$:「（暫定）最短経路長を記録するための変数」&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;手続き&#34;&gt;手続き&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$d \gets 0$とする．スタート座標 $(sx, sy)$ についてのみ $\dist{sy}{sx} \gets 0$とし，それ以外の各座標 $(x, y)$ について $\dist{y}{x} \gets \infty$とする．&lt;/li&gt;&#xA;&lt;li&gt;$\dist{y}{x} = d$ となるような各 $(x, y)$ を探索対象として，以下を実行:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$(x, y) = (gx, gy)$ならば，最短経路長として $d$ を返して終了;&lt;/li&gt;&#xA;&lt;li&gt;$(x, y) \neq (gx, gy)$ならば，$(x, y)$から（$\map$の障害物情報を考慮しつつ）一回の移動（注: 移動可能マスは上下左右で障害物が無いマス）で辿り着ける座標 $(\xp, \yp)$ について，$\dist{\yp}{\xp} \gets \mathrm{min}\lbrace \dist{\yp}{\xp}, (d+1) \rbrace$ とする．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;距離が $d$ の場合の更新処理を全て終えた後，$d \gets (d+1)$として 2. を繰り返す．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;迷路の設定&lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;maze-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;入力&lt;/label&gt;&#xA;    &lt;textarea class=&#34;w-full&#34; rows=&#34;12&#34; id=&#34;maze-input&#34;&gt;&lt;/textarea&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;maze-load&#34;&gt;設定&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;迷路の最短経路探索&lt;/label&gt;&#xA;    &lt;div class=&#34;mb-1&#34; id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;text-center&#34;&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;prev&#34;&gt;前へ&lt;/button&gt;&#xA;      &lt;button class=&#34;alg-btn&#34; id=&#34;next&#34;&gt;次へ&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>隣接行列による有向グラフ表示</title>
      <link>http://localhost:1313/ja/directed-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/directed-graph/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;重み付き有向グラフを隣接行列形式で表現・表示する．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>隣接行列による無向グラフ表示</title>
      <link>http://localhost:1313/ja/undirected-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ja/undirected-graph/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;重み付き無向グラフを隣接行列形式で表現・表示する．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h2&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label for=&#34;setting&#34;&gt;グラフの設定（&#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            「カスタム」から「サンプル1」などに切り替えると、用意されたグラフを使用可能。&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点名を入力し「追加」を押すと挿入モードになり、グラフ上の位置を選ぶと頂点を追加できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&#xA;    &lt;/label&gt;&#xA;    &lt;select class=&#34;alg-select mb-1&#34; name=&#34;setting&#34; id=&#34;graph-select&#34;&gt;&#xA;      &lt;option value=&#34;0&#34;&gt;カスタム&lt;/option&gt;&#xA;      &lt;option value=&#34;1&#34;&gt;サンプル1&lt;/option&gt;&#xA;      &lt;option value=&#34;2&#34;&gt;サンプル2&lt;/option&gt;&#xA;      &lt;option value=&#34;3&#34;&gt;サンプル3&lt;/option&gt;&#xA;    &lt;/select&gt;&#xA;    &lt;label&gt;頂点の追加&lt;/label&gt;&#xA;    &lt;input class=&#34;alg-input mb-1&#34; id=&#34;node_label&#34; type=&#34;text&#34; placeholder=&#34;頂点名&#34;&gt;&lt;/input&gt;&#xA;    &lt;button class=&#34;alg-btn&#34; id=&#34;add&#34;&gt;追加&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;label&gt;隣接行列&lt;/label&gt;&#xA;  &lt;table class=&#34;w-full border&#34; id=&#34;matrix_tbl&#34;&gt;&#xA;  &lt;/table&gt;&#xA;  &lt;div&gt;&#xA;    &lt;label&gt;グラフ（ &#xA;      &lt;span class=&#34;relative&#34;&gt;&#xA;        &lt;button data-popover-target=&#34;popover-info2&#34; type=&#34;button&#34; class=&#34;text-blue-500 underline hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300&#34;&gt;&#xA;          補足説明 ⓘ&#xA;        &lt;/button&gt;&#xA;        &lt;div id=&#34;popover-info2&#34; role=&#34;tooltip&#34; class=&#34;absolute z-10 invisible inline-block w-64 text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800&#34;&gt;&#xA;          &lt;div class=&#34;px-3 py-1 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700 font-semibold&#34;&gt;&#xA;            補足説明 ⓘ&#xA;          &lt;/div&gt;&#xA;          &lt;div class=&#34;px-3 py-2&#34;&gt;&#xA;            頂点を選ぶと位置修正モードになり、グラフ上の新しい場所を選ぶと頂点が移動できる。&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/span&gt;&#xA;      ）&lt;/label&gt;&#xA;    &lt;div id=&#34;canvas-hole&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
